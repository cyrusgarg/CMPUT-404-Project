To create token for authentication, use the following:
    python manage.py drf_create_token <username>

To delete unused docker containers
    docker system prune -a --volumes

To drop the postgress table
    docker compose exec postgres psql -U hello_django -d postgres
    DROP DATABASE hello_django;
    CREATE DATABASE hello_django;
    \q
    docker compose restart socialapp

To migrate in docker
    docker compose exec socialapp python manage.py makemigrations posts
    docker compose exec socialapp python manage.py makemigrations identity
    docker compose exec socialapp python manage.py migrate posts
    docker compose exec socialapp python manage.py migrate identity
    docker compose exec socialapp python manage.py migrate posts zero
    docker compose exec socialapp python manage.py migrate posts
    docker compose exec socialapp python manage.py migrate identity zero
    docker compose exec socialapp python manage.py migrate identity
    docker compose restart socialapp
    docker compose exec socialapp python manage.py migrate --noinput
    docker compose exec socialapp python manage.py createsuperuser

if you see error regarding nodetable doesnt exist: 
    docker compose exec postgres psql -U hello_django -d hello_django
    CREATE TABLE identity_remotenode (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    host_url VARCHAR(200) UNIQUE NOT NULL,
    username VARCHAR(100) NOT NULL,
    password VARCHAR(100) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
    (type \q and press Enter)
    docker compose exec socialapp python manage.py migrate identity --fake
    docker compose restart socialapp


Some helpful git commands
    git branch  //to see which branch you are on
    git pull origin main //to pull the origin main code into current branch

To install the requirements from requirements file
    pip install -r requirements.txt 

Run the following command under root directory to update and collect all the static files
    python manage.py collectstatic

To create a new post 
"rm db.sqlite3
rm -rf posts/migrations  #clean the db and mig file first
rm -rf identity/migrations
python manage.py makemigrations 
python manage.py makemigrations posts
python manage.py makemigrations identity
python manage.py migrate #then do the migtate
python manage.py createsuperuser       #create the super admin
python manage.py runserver
then go to the page localhost:8000/admin/ for login the acount 
then u can create the regular user in Django administration 
then use localhost:8000/api/posts/ or localhost:8000/post/ # pgae for author to create the post
then use localhost:8000/api/posts/views or localhost:8000/posts/views #page for reader to check the post they have premessions to read
other url can check in url.py"

To check the functionality of an author 
"you can check the functionality by going to the url :
http://127.0.0.1:8000/authors/<your_username>
and run the commands:
python manage.py shell
from identity.models import Author, GitHubActivity
from django.utils import timezone
author = Author.objects.get(user__username='')
GitHubActivity.objects.create(
author=author,
event_id='test123',
event_type='PushEvent',
payload={'message': 'Test commit', 'repo': 'example/repo'},
created_at=timezone.now()
)"